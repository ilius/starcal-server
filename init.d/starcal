#!/bin/sh

### BEGIN INIT INFO
# Provides: starcal
# Required-Start: $local_fs $remote_fs $network $syslog $named
# Required-Stop: $local_fs $remote_fs $network $syslog $named
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: StarCakendar Server
# Description: starts StarCakendar Server using start-stop-daemon
### END INIT INFO

# Copyright (C) Saeed Rasooli <saeed.gnu@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/gpl.txt>.
# Also avalable in /usr/share/common-licenses/GPL on Debian systems
# or /usr/share/licenses/common/GPL3/license.txt on ArchLinux

########################## Functions ###########################

if [ -f /etc/debian_version ] ; then
	system=debian
elif [ -f /etc/arch-release ]; then
	system=arch
elif [ -f /etc/redhat-release ]; then
	system=redhat
elif [ -f /etc/SuSE-release ]; then
	system=suse
elif [ -f /etc/gentoo-release ]; then
	system=gentoo
elif [ -f /etc/lfs-release -a -d /etc/rc.d/init.d ]; then
	system=lfs
else
	system=other
fi

if [ "$system" = "debian" ] ; then
	. /lib/init/vars.sh
	. /lib/lsb/init-functions
	fail_msg() {
		log_end_msg 1
	}
	succ_msg() {
		log_end_msg 0
	}
	begin() {
		[ "$VERBOSE" != no ] && log_daemon_msg "$1" "$NAME"
	}
elif [ "$system" = "arch" ]; then
	USECOLOR=yes
	. /etc/rc.d/functions
	fail_msg() {
		stat_fail
	}
	succ_msg() {
		stat_done
	}
	begin() {
		stat_busy "$1"
	}
elif [ "$system" = "redhat" ]; then
	. /etc/init.d/functions
	fail_msg() {
		echo_failure
		echo
	}
	succ_msg() {
		echo_success
		echo
	}
	begin() {
		echo -n "$1"
	}
elif [ "$system" = "suse" ]; then
	. /etc/rc.status
	fail_msg() {
		rc_failed 1
		rc_status -v
	}
	succ_msg() {
		rc_reset
		rc_status -v
	}
	begin() {
		echo -n "$1"
	}
elif [ "$system" = "gentoo" ]; then
	if [ -f /sbin/functions.sh ]; then
		. /sbin/functions.sh
	elif [ -f /etc/init.d/functions.sh ]; then
		. /etc/init.d/functions.sh
	fi
	fail_msg() {
		eend 1
	}
	succ_msg() {
		eend $?
	}
	begin() {
		ebegin $1
	}
	if [ "`which $0`" = "/sbin/rc" ]; then
		shift
	fi
elif [ "$system" = "lfs" ]; then
	. /etc/rc.d/init.d/functions
	fail_msg() {
		echo_failure
	}
	succ_msg() {
		echo_ok
	}
	begin() {
		echo $1
	}
else
	fail_msg() {
		echo " ...fail!"
	}
	succ_msg() {
		echo " ...done."
	}
	begin() {
		echo -n $1
	}
fi

show_error()
{
	if [ "$system" = "gentoo" ]; then
		eerror $1
	fi
	fail_msg
	echo "($1)"
}

fail()
{
	show_error "$1"
	exit 1
}



################################################################



PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/local/sbin/starcal-server
NAME=starcal
DESC='StarCakendar Server'

LOG_DIR=/var/log/starcal-server/
LOG_MAX_SIZE=102400
LOG_MAX_FILES=10

START_CMD="exec $DAEMON $DAEMON_ARGS 2>&1 | multilog t s$LOG_MAX_SIZE n$LOG_MAX_FILES '!tai64nlocal' $LOG_DIR"


mkdir -p $LOG_DIR

test -x $DAEMON || exit 0




PID=/run/starcal-server.pid

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PID --startas /bin/bash -- -c "$START_CMD" --test > /dev/null || return 1
	start-stop-daemon --start --quiet --pidfile $PID --startas /bin/bash -- -c "$START_CMD" || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=2 --pidfile $PID --name $NAME
	RETVAL="$?"

	sleep 1
	return "$RETVAL"
}


case "$1" in
	start)
		begin "Starting $DESC"
		do_start
		case "$?" in
			0)
				[ "$VERBOSE" != no ] && succ_msg
				;;
			1)
				[ "$VERBOSE" != no ] && succ_msg
				;;
			2)
				[ "$VERBOSE" != no ] && fail_msg
				;;
		esac
		;;
	stop)
		begin "Stopping $DESC"
		do_stop
		case "$?" in
			0)
				[ "$VERBOSE" != no ] && succ_msg
				;;
			1)
				[ "$VERBOSE" != no ] && succ_msg
				;;
			2)
				[ "$VERBOSE" != no ] && fail_msg
				;;
		esac
		;;
	restart)
		begin "Restarting $DESC"
		do_stop
		case "$?" in
			0|1)
				do_start
				case "$?" in
					0) succ_msg ;;
					1) fail_msg ;; # Old process is still running
					*) fail_msg ;; # Failed to start
				esac
				;;
			*)
				# Failed to stop
				fail_msg
				;;
		esac
		;;
	status)
		#status_of_proc -p $PID "$DAEMON" "$NAME" && exit 0 || exit $? # Debian
		systemctl status "$NAME"
		;;
	*)
		echo "Usage: $NAME {start|stop|restart|status}" >&2
		exit 3
		;;
esac

:
